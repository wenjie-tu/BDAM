
model {

  #Priors
  ag_mu ~ dunif(0.5,3) # boundary separation baseline
  ag_sd ~ dunif(0.001, 5)
  ig_mu ~ dunif(-0.2,0.2) # boundary separation power
  ig_sd ~ dunif(0.001,1)
  tg_mu ~ dunif(0.05, 1) # non-decision time
  tg_sd ~ dunif(0.001, 5)
  etag_mu ~ dunif(0,1)  # learning rate
  etag_sd ~ dunif(0.001, 5)
  mg_mu ~ dunif(0,10) # drift scaling parameter
  mg_sd ~ dunif(0.001,5)

  #Transform sd to precision
  ag_tau <- pow(ag_sd,-2)
  ig_tau <- pow(ig_sd,-2)
  tg_tau <- pow(tg_sd,-2)
  etag_tau <- pow(etag_sd,-2)
  mg_tau <- pow(mg_sd,-2)

  #Group parameters
  for (g in 1:G) {
    #dual learning rates
    for (v in 1:2) {
      etag[g,v] ~ dnorm(etag_mu,etag_tau)T(0,1)
      eta_sd[g,v] ~ dunif(0.001, 5)
      eta_tau[g,v] <- pow(eta_sd[g,v],-2)
    }
    ag[g] ~ dnorm(ag_mu,ag_tau)
    a_sd[g] ~ dunif(0.001, 5)
    a_tau[g] <- pow(a_sd[g],-2)
    ig[g] ~ dnorm(ig_mu,ig_tau)
    i_sd[g] ~ dunif(0.001, 5)
    i_tau[g] <- pow(i_sd[g],-2)
    mg[g] ~ dnorm(mg_mu,mg_tau)
    m_sd[g] ~ dunif(0.001, 5)
    m_tau[g] <- pow(m_sd[g],-2)
    tg[g] ~ dnorm(tg_mu,tg_tau)
    t_sd[g] ~ dunif(0.001, 5)
    t_tau[g] <- pow(t_sd[g],-2)
  }

  #Subject parameters
  for (g in 1:G) {
    for (s in 1:S) {
      for (v in 1:2) {
        eta[g,s,v] ~ dnorm(etag[g,v],eta_tau[g,v])T(0,1)
      }
      a[g,s] ~ dnorm(ag[g],a_tau[g])
      i[g,s] ~ dnorm(ig[g],i_tau[g])
      m[g,s] ~ dnorm(mg[g],m_tau[g])
      t[g,s] ~ dnorm(tg[g],t_tau[g])
    }
  }

  #Loop through trials for each group and subject
  for (g in 1:G) {
    for (s in 1:S) {

      #Assign starting values to q[group,trial,stimulus pair,option].
      #'first' is a two-dimensional-array identifying first trial for each subject in each group.
      for (stim_pair in 1:3) {
        q[g,first[s,g],stim_pair,1] <- 0
        q[g,first[s,g],stim_pair,2] <- 0
      }

      #Run through trials
      #'last' is a two-dimensional-array identifying last trial for each subject in each group.
      for (trial in (first[s,g]):(last[s,g]-1)) {

        #Calculate drift rate parameter as q-delta multiplited by m
        v[trial] <- (q[g,trial,pair[trial],1] - q[g,trial,pair[trial],2]) * m[g,s]

        #Estimate likelihood of choice's response time with dwiener
        RT[trial] ~ dwiener(a[g,s] * ((iter[trial]/10)^i[g,s]),t[g,s],0.5,v[trial])
        log_lik[trial] <- logdensity.wiener(RT[trial], a[g,s] * ((iter[trial]/10)^i[g,s]),t[g,s],0.5,v[trial])

        #Update q-values for next trial. 'pair' identifies the stimulus pair in the current trial 'not1' and 'not2' identifies the other stimulus pairs.
        q[g,trial+1,pair[trial],choice[trial]] <- q[g,trial,pair[trial],choice[trial]] + eta[g,s,valence[trial]] * (value[trial]-q[g,trial,pair[trial],choice[trial]])
        q[g,trial+1,pair[trial],nonchoice[trial]] <- q[g,trial,pair[trial],nonchoice[trial]]
        q[g,trial+1,not1[trial],1] <- q[g,trial,not1[trial],1]
        q[g,trial+1,not1[trial],2] <- q[g,trial,not1[trial],2]
        q[g,trial+1,not2[trial],1] <- q[g,trial,not2[trial],1]
        q[g,trial+1,not2[trial],2] <- q[g,trial,not2[trial],2]
      }

      #Q-values are not updated in last trial
      for (trial in last[s,g]) {
        v[trial] <- (q[g,trial,pair[trial],1] - q[g,trial,pair[trial],2]) * m[g,s]
        RT[trial] ~ dwiener(a[g,s] * ((iter[trial]/10)^i[g,s]),t[g,s],0.5,v[trial])
        log_lik[trial] <- logdensity.wiener(RT[trial], a[g,s] * ((iter[trial]/10)^i[g,s]),t[g,s],0.5,v[trial])
      }
    }
  }
}
